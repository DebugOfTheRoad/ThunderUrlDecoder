//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace Jiuyong.Shaders
{
	
	
	/// <summary>夹缩一个圆形区域的着色器效果。</summary>
	public class PinchEffect : ShaderEffect
	{
		
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(PinchEffect), 0);
		
		public static readonly DependencyProperty CenterProperty = DependencyProperty.Register("Center", typeof(Point), typeof(PinchEffect), new UIPropertyMetadata(new Point(0.5D, 0.5D), PixelShaderConstantCallback(0)));
		
		public static readonly DependencyProperty RadiusProperty = DependencyProperty.Register("Radius", typeof(double), typeof(PinchEffect), new UIPropertyMetadata(((double)(0.25D)), PixelShaderConstantCallback(1)));
		
		public static readonly DependencyProperty StrengthProperty = DependencyProperty.Register("Strength", typeof(double), typeof(PinchEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(2)));
		
		public static readonly DependencyProperty AspectRatioProperty = DependencyProperty.Register("AspectRatio", typeof(double), typeof(PinchEffect), new UIPropertyMetadata(((double)(1.5D)), PixelShaderConstantCallback(3)));
		
		public PinchEffect()
		{
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/ThunderUrlDecoder;component/PinchEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(CenterProperty);
			this.UpdateShaderValue(RadiusProperty);
			this.UpdateShaderValue(StrengthProperty);
			this.UpdateShaderValue(AspectRatioProperty);
		}
		
		public Brush Input
		{
			get
			{
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set
			{
				this.SetValue(InputProperty, value);
			}
		}
		
		/// <summary>夹缩区中心点。</summary>
		[Category("着色器")]
		[Description("夹缩区中心点。")]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public Point Center
		{
			get
			{
				return ((Point)(this.GetValue(CenterProperty)));
			}
			set
			{
				this.SetValue(CenterProperty, value);
			}
		}
		
		/// <summary>夹缩区半径。</summary>
		[Category("着色器")]
		[Description("夹缩区半径。")]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public double Radius
		{
			get
			{
				return ((double)(this.GetValue(RadiusProperty)));
			}
			set
			{
				this.SetValue(RadiusProperty, value);
			}
		}
		
		/// <summary>夹点效应强度。</summary>
		[Category("着色器")]
		[Description("夹点效应强度。")]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public double Strength
		{
			get
			{
				return ((double)(this.GetValue(StrengthProperty)));
			}
			set
			{
				this.SetValue(StrengthProperty, value);
			}
		}
		
		/// <summary>输入的纵横（宽高）比。</summary>
		[Category("着色器")]
		[Description("输入的纵横（宽高）比。")]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public double AspectRatio
		{
			get
			{
				return ((double)(this.GetValue(AspectRatioProperty)));
			}
			set
			{
				this.SetValue(AspectRatioProperty, value);
			}
		}
	}
}
